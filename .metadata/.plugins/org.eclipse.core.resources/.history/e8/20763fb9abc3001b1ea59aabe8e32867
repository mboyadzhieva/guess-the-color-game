package guess.the.color.project.logic;

import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.UUID;
import java.util.concurrent.ConcurrentHashMap;

import org.springframework.stereotype.Service;

import guess.the.color.project.model.Complexity;
import guess.the.color.project.model.Game;

@Service
public class GuessTheColorServiceImpl implements GuessTheColorService {

	public Map<Long, Integer> gamesInfo = new ConcurrentHashMap<>();

	public Game startNewGame(String complexity) {
		Game game = new Game();

		game.setId(UUID.randomUUID().toString());
		Color mainColor = generateMainColor();

		String colorInHex = String.format("#%02x%02x%02x", mainColor.getRed(), mainColor.getGreen(),
				mainColor.getBlue());
		game.setMainColor(colorInHex);
		System.out.println(game.getMainColor());

		switch (complexity) {
		case "Easy":
			game.setComplexity(Complexity.EASY);
			game.setNumOfStartingColors(3);
			game.setRounds(10);
			break;
		case "Medium":
			game.setComplexity(Complexity.MEDIUM);
			game.setNumOfStartingColors(5);
			game.setRounds(15);
			break;
		case "Hard":
			game.setComplexity(Complexity.HARD);
			game.setNumOfStartingColors(8);
			game.setRounds(20);
			break;
		default:
			break;
		}

		List<Color> colors = generateColorsToChooseFrom(mainColor, game.getNumOfStartingColors());
		List<String> colorsAsString = new ArrayList<String>();

		for (Color color : colors) {
			String colorString = String.format("#%02x%02x%02x", color.getRed(), color.getGreen(), color.getBlue());
			colorsAsString.add(colorString);
		}

		game.setColorsToChooseFrom(colorsAsString);

		return game;
	}

	public Integer getGameScore(Long gameId) {
		return gamesInfo.get(gameId);
	}

	public Color generateMainColor() {
		Random random = new Random();
		int r = random.nextInt(255);
		int g = random.nextInt(255);
		int b = random.nextInt(255);

		Color mainColor = new Color(r, g, b);
		return mainColor;
	}

	public List<Color> generateColorsToChooseFrom(Color mainColor, int num) {
		Random random = new Random();
		List<Color> sideColors = new ArrayList<Color>();
		sideColors.add(mainColor);

		for (int i = 0; i < num-1; i++) {
			int randomRed = random.nextInt(255 - mainColor.getRed());
			int randomGreen = random.nextInt(255 - mainColor.getGreen());
			int randomBlue = random.nextInt(255 - mainColor.getBlue());

			Color color = new Color(randomRed, randomGreen, randomBlue);
			sideColors.add(color);
		}

		return sideColors;
	}
}
