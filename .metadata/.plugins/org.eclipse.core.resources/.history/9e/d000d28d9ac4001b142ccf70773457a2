package guess.the.color.project.logic;

import java.util.Map;
import java.util.UUID;
import java.util.concurrent.ConcurrentHashMap;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import guess.the.color.project.model.Complexity;
import guess.the.color.project.model.Game;

@Service
public class GameServiceImpl implements GameService {

	@Autowired
	private ColorServiceImpl colorService;
	public Map<String, Game> gamesInfo = new ConcurrentHashMap<>();

	public Game startNewGame(String complexity) {
		Game game = new Game();

		game.setId(UUID.randomUUID().toString());
		setGameSpecifics(complexity, game);
		colorService.generateRoundColors(game);
		gamesInfo.put(game.getId(), game);

		return game;
	}

	public Game getGame(String gameId) {
		return gamesInfo.get(gameId);
	}

	public void saveGame(Game game) {
		gamesInfo.put(game.getId(), game);
	}

	public void setGameSpecifics(String complexity, Game game) {
		switch (complexity) {
		case "Easy":
			game.setComplexity(Complexity.EASY);
			game.setNumOfStartingColors(3);
			game.setRounds(10);
			break;
		case "Medium":
			game.setComplexity(Complexity.MEDIUM);
			game.setNumOfStartingColors(5);
			game.setRounds(15);
			break;
		case "Hard":
			game.setComplexity(Complexity.HARD);
			game.setNumOfStartingColors(8);
			game.setRounds(20);
			break;
		}
	}

	public Game checkColor(Game game, String color, Complexity complexity) {
		String mainColor = game.getMainColor();

		int currentRound = game.getCurrentRound();
		int maxRounds = game.getRounds();
		int currentScore = game.getScore();
		int currentCircleCount = game.getNumOfStartingColors();

		if (mainColor.equals(color)) {
			if (currentRound % 3 == 0 && game.getComplexity() != Complexity.HARD) {
				currentCircleCount += 1;
			} else if (currentRound % 4 == 0 && game.getComplexity() == Complexity.HARD) {
				currentCircleCount += 1;
			}

			game.setNumOfStartingColors(currentCircleCount);

			if (currentRound == maxRounds) {
				game.setWon(true);
			} else {
				game.setCurrentRound(currentRound + 1);
				colorService.generateRoundColors(game);
			}

			if (game.getComplexity() == Complexity.EASY) {
				currentScore += 100;
			} else if (game.getComplexity() == Complexity.MEDIUM) {
				currentScore += 200;
			} else if (game.getComplexity() == Complexity.HARD) {
				currentScore += 300;
			}
		} else {
			currentScore -= 50;
		}

		game.setScore(currentScore);
		return game;
	}
}
